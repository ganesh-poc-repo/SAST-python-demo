Here's a sample GitHub Actions workflow for your Python repository:

```yml
name: Python package build, test and deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up environment variables
        id: env
        run: |
          export Python=$(python --version)
          echo "Python version: $Python"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build and test
        if: fail()
        run: |
          python setup.py build
          python tests/test_main.py

      - name: Generate library list file
        run: |
          pip freeze > library_list.txt

      - name: Add SonarQube details
        uses: sonarr-sonarqube/sonarqube-action@v1.0.0-beta.6
        with:
          token: ${{ secrets.SONAR_TOKEN }}
          analysis_mode: 'source'
          language: 'python'
          project_key: 'your-project-key'
          project_name: 'Your Project Name'

      - name: Add Artifactory details
        uses: artifactory-ai/ArtifactoryUpload@v1.0.0
        with:
          api_token: ${{ secrets.ARTIFACTORY_API_TOKEN }}
          repository_name: 'your-repo-name'
          username: 'your-username'
          password: 'your-password'

      - name: SAST Scan using SonarQube
        uses: sonarr-sonarqube/sonarqube-action@v1.0.0-beta.6
        with:
          token: ${{ secrets.SONAR_TOKEN }}
          analysis_mode: 'source'
          language: 'python'
          project_key: 'your-project-key'
          project_name: 'Your Project Name'
          sast_tool: 'sonarqube-sast'

      - name: SCA Scan using SonarQube
        uses: sonarr-sonarqube/sonarqube-action@v1.0.0-beta.6
        with:
          token: ${{ secrets.SONAR_TOKEN }}
          analysis_mode: 'source'
          language: 'python'
          project_key: 'your-project-key'
          project_name: 'Your Project Name'
          scancode_tool: 'sonarqube-scan'

      - name: Upload to Artifactory
        uses: artifactory-ai/ArtifactoryUpload@v1.0.0
        with:
          api_token: ${{ secrets.ARTIFACTORY_API_TOKEN }}
          repository_name: 'your-repo-name'
          username: 'your-username'
          password: 'your-password'

      - name: Upload artifact to Artifactory
        uses: artifactory-ai/ArtifactoryUpload@v1.0.0
        with:
          api_token: ${{ secrets.ARTIFACTORY_API_TOKEN }}
          repository_name: 'your-repo-name'
          username: 'your-username'
          password: 'your-password'

      - name: Deploy package
        uses: azure-pipelines-actions/deploy@v2
        with:
          command: 'az pipeline deployment create --name your-deployment-name --resource-group your-resource-group --pipeline-name your-pipeline-name'
```

**Explanation of the workflow**

- `on`: This is where you specify when the workflow should run. In this case, it's triggered on push events to the main branch.

- `jobs`: Here we define a single job called `build-and-test` which runs on an `ubuntu-latest` environment.

- Inside the job, there are multiple steps that represent different tasks in your CI/CD pipeline.

- The first step checks out the repository and sets up the required environment variables.

- The second step installs all the dependencies from the `requirements.txt` file.

- If the deployment configuration is correct, it then builds the Python package using the `setup.py` script.

- After building the package, it runs some tests (assuming you have a `test_main.py` file) to validate that everything works as expected.

- It generates a list of all installed packages and writes them to a file called `library_list.txt`.

- Then it sets up SonarQube by creating an analysis task with the necessary credentials and details for your project. This includes setting up SAST (Source Analysis Tool) and SCA (Security Code Analysis Tool) scans.

- Finally, it uploads the generated package to Artifactory using the `ArtifactoryUpload` action.

This workflow assumes that you have a `pyproject.toml` file in the root of your repository with the necessary dependencies.