Here's a sample YAML workflow that you can use as a starting point for your CI/CD pipeline:

```yml
name: Python Package Build and Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run build and tests (if applicable)
        if: branches != 'main'
        run: |
          python setup.py sdist bdist_wheel
          python -m twine upload dist/*
          python setup.py test

      - name: Publish library list file
        uses: actions/upload-artifact@v2
        with:
          path: liblist.txt

      - name: Add sonarqube details
        uses: sonarqube/sonarqube-action@v1.0.3
        env:
          SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_USER: ${{ secrets.SONARQUBE_USER }}

      - name: Add artifactory details
        uses: artifactory/artifactory-action@v1.0.5
        with:
          ARTIFACTORY_HOST: ${{ secrets.ARTIFACTORY_HOST }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Add SAST & SCA scan
        uses: sonarqube/sonarqube-action@v1.0.3
        with:
          SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONARQUBE_USER: ${{ secrets.SONARQUBE_USER }}
          SONARQUBE_PROJECT_KEY: 'your-project-key'
          SONARQUBE_REPOSITORY_KEY: 'your-repository-key'

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: your-artifact-name
          path: dist/*
```

Please note that you'll need to replace the placeholders (`your-project-key`, `your-repository-key`, `dist/` etc.) with your actual values. Also, make sure you've set up Sonarqube and Artifactory as secrets in your GitHub repository settings.

Also, I assume that `pyproject.toml` file is used for dependency management so it's not necessary to install dependencies from requirements.txt if you're managing them via pip in pyproject.toml.